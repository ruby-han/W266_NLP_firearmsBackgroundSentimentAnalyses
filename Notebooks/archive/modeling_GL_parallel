{"cells":[{"cell_type":"markdown","metadata":{"id":"nR8dyx0AHsVb"},"source":["### Import Packages"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"W5paQvvxX1BS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658193978831,"user_tz":420,"elapsed":43743,"user":{"displayName":"Gerrit Lensink","userId":"03001139976263396963"}},"outputId":"9f6498bd-2118-47c3-cf9e-f270501a7725"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[K     |████████████████████████████████| 24.2 MB 68.7 MB/s \n","\u001b[K     |████████████████████████████████| 4.9 MB 9.2 MB/s \n","\u001b[K     |████████████████████████████████| 4.4 MB 34.8 MB/s \n","\u001b[K     |████████████████████████████████| 596 kB 63.2 MB/s \n","\u001b[K     |████████████████████████████████| 6.6 MB 55.2 MB/s \n","\u001b[K     |████████████████████████████████| 101 kB 12.1 MB/s \n","\u001b[K     |████████████████████████████████| 1.1 MB 33.1 MB/s \n","\u001b[?25h"]}],"source":["#@title Imports\n","\n","!pip install pydot --quiet\n","!pip install gensim==3.8.3 --quiet\n","!pip install tensorflow-datasets --quiet\n","!pip install -U tensorflow-text==2.8.2 --quiet\n","!pip install transformers --quiet\n","!pip install pydot --quiet\n","!pip install tensorflow_addons --quiet"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"yVCGGpRCDmWU","executionInfo":{"status":"ok","timestamp":1658193990107,"user_tz":420,"elapsed":11289,"user":{"displayName":"Gerrit Lensink","userId":"03001139976263396963"}}},"outputs":[],"source":["# Import packages\n","import pandas as pd\n","import numpy as np\n","from tensorflow import keras\n","\n","from tensorflow.keras.layers import Embedding, Input, Dense, Lambda\n","from tensorflow.keras.models import Model\n","import tensorflow.keras.backend as K\n","import tensorflow_datasets as tfds\n","import tensorflow_text as tf_text\n","import tensorflow_addons as tfa\n","\n","from google.colab import drive\n","\n","from collections import Counter\n","import matplotlib.pyplot as plt\n","from nltk.util import ngrams\n","\n","from transformers import BertTokenizer, TFBertModel\n","from tqdm.notebook import tqdm\n","from keras.preprocessing.sequence import pad_sequences\n","\n","from sklearn.model_selection import train_test_split\n","import tensorflow as tf\n","\n","\n","import time\n","from transformers import create_optimizer\n","\n","import sklearn as sk\n","import os\n","import nltk\n","from nltk.corpus import reuters\n","from nltk.data import find\n","\n","import re\n","\n","import gensim\n","from sklearn.metrics.pairwise import cosine_similarity\n","from transformers import BertModel\n"]},{"cell_type":"code","source":["pd.set_option(\"display.max_rows\", None, # display all rows\n","              \"display.max_columns\", None, # display all columns\n","              \"display.max_colwidth\", None, # expand column width\n","              \"display.html.use_mathjax\", False) # disable Latex style mathjax rendering"],"metadata":{"id":"Mv7MzE4WmHMf","executionInfo":{"status":"ok","timestamp":1658193990108,"user_tz":420,"elapsed":8,"user":{"displayName":"Gerrit Lensink","userId":"03001139976263396963"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","execution_count":4,"metadata":{"id":"NFPBnrozD6RK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658194020172,"user_tz":420,"elapsed":30070,"user":{"displayName":"Gerrit Lensink","userId":"03001139976263396963"}},"outputId":"1c268450-4f69-4785-81ec-024bbd446de6"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /drive\n","/drive/MyDrive/W266 Project/Colab Notebooks/Exploration\n","/drive/MyDrive/W266 Project/Colab Notebooks/Exploration\n"]}],"source":["drive.mount('/drive') \n","%cd /drive/MyDrive/W266 Project/Colab Notebooks/Exploration\n","!pwd"]},{"cell_type":"markdown","metadata":{"id":"xPWjxRSHoA6p"},"source":["# Model - BERT"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"eWpis5aUnysI","executionInfo":{"status":"ok","timestamp":1658194026700,"user_tz":420,"elapsed":6533,"user":{"displayName":"Gerrit Lensink","userId":"03001139976263396963"}}},"outputs":[],"source":["final_train = pd.read_csv('../../data/transformed/final/train.csv').sample(frac = 1) # shuffle rows\n","final_test = pd.read_csv('../../data/transformed/final/test.csv').sample(frac = 1) # shuffle rows"]},{"cell_type":"code","source":["\n","# \n","# print(small_data_size, train_size, test_size, pos_exs, neg_exs)"],"metadata":{"id":"lcMrNiMsH3z3","executionInfo":{"status":"ok","timestamp":1658194026701,"user_tz":420,"elapsed":12,"user":{"displayName":"Gerrit Lensink","userId":"03001139976263396963"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["small_data_size = 35000\n","train_split = .8\n","train_size = int(small_data_size * train_split)\n","test_size = small_data_size - train_size\n","\n","# Reduce size of data for quick testing \n","small_train = final_train.sample(n = train_size, \n","                                 random_state = 2)\n","small_test = final_test.sample(n = test_size, \n","                               random_state = 2)\n","\n","# undersample_rate = .7\n","# pos_exs = int(train_size * .7)\n","# neg_exs = train_size - pos_exs\n","\n","# # Simulate Undersampling\n","# small_train_1 = final_train[final_train['violent'] == 1]\\\n","#                 .sample(n = pos_exs, \n","#                         random_state = 2)\n","                \n","# small_train_0 = final_train[final_train['violent'] == 0]\\\n","#                 .sample(n = neg_exs, \n","#                         random_state = 2)\n","                \n","# small_train = pd.concat([small_train_1, small_train_0], \n","#                         ignore_index=True, axis=0)\n","\n","# repoint to avoid having to update code below\n","final_train = small_train\n","final_test = small_test"],"metadata":{"id":"x81SBJ7Eug4N","executionInfo":{"status":"ok","timestamp":1658194026701,"user_tz":420,"elapsed":10,"user":{"displayName":"Gerrit Lensink","userId":"03001139976263396963"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","execution_count":8,"metadata":{"id":"p7GY1WTXojZW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658194026702,"user_tz":420,"elapsed":10,"user":{"displayName":"Gerrit Lensink","userId":"03001139976263396963"}},"outputId":"4f9f373e-cb57-4fbd-edd7-bbc8f6d3e186"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    6318\n","1     682\n","Name: violent, dtype: int64"]},"metadata":{},"execution_count":8}],"source":["# quick check to make sure we see expected representation of 0 and 1\n","# final_train['violent'].value_counts()\n","final_test['violent'].value_counts()"]},{"cell_type":"markdown","metadata":{"id":"zuyES9gnEXHw"},"source":["Import helper functions"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"5JG43fibEWq1","executionInfo":{"status":"ok","timestamp":1658194026702,"user_tz":420,"elapsed":8,"user":{"displayName":"Gerrit Lensink","userId":"03001139976263396963"}}},"outputs":[],"source":["#@title Plotting Function\n","\n","# 4-window plot. Small modification from matplotlib examples.\n","\n","def make_plot(axs, history1, \n","              history2, \n","              y_lim_loss_lower=0.4, \n","              y_lim_loss_upper=0.6,\n","              y_lim_accuracy_lower=0.7, \n","              y_lim_accuracy_upper=0.8,\n","              model_1_name='model 1',\n","              model_2_name='model 2',\n","              \n","             ):\n","    box = dict(facecolor='yellow', pad=5, alpha=0.2)\n","\n","    ax1 = axs[0, 0]\n","    ax1.plot(history1.history['loss'])\n","    ax1.plot(history1.history['val_loss'])\n","    ax1.set_title('loss - ' + model_1_name)\n","    ax1.set_ylabel('loss', bbox=box)\n","    ax1.set_ylim(y_lim_loss_lower, y_lim_loss_upper)\n","\n","    ax3 = axs[1, 0]\n","    ax3.set_title('accuracy - ' + model_1_name)\n","    ax3.plot(history1.history['accuracy'])\n","    ax3.plot(history1.history['val_accuracy'])\n","    ax3.set_ylabel('accuracy', bbox=box)\n","    ax3.set_ylim(y_lim_accuracy_lower, y_lim_accuracy_upper)\n","\n","\n","    ax2 = axs[0, 1]\n","    ax2.set_title('loss - ' + model_2_name)\n","    ax2.plot(history2.history['loss'])\n","    ax2.plot(history2.history['val_loss'])\n","    ax2.set_ylim(y_lim_loss_lower, y_lim_loss_upper)\n","\n","    ax4 = axs[1, 1]\n","    ax4.set_title('accuracy - ' + model_2_name)\n","\n","    # small adjustment to account for the 2 accuracy measures in the Weighted Averging Model with Attention\n","    if 'classification_accuracy' in history2.history.keys():\n","      ax4.plot(history2.history['classification_accuracy'])\n","    else:\n","      ax4.plot(history2.history['accuracy'])\n","    \n","    if 'val_classification_accuracy' in history2.history.keys():\n","      ax4.plot(history2.history['val_classification_accuracy'])\n","    else:\n","      ax4.plot(history2.history['val_accuracy'])\n","    ax4.set_ylim(y_lim_accuracy_lower, y_lim_accuracy_upper)"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"8MHhB1yeErJB","colab":{"base_uri":"https://localhost:8080/","height":113,"referenced_widgets":["2fae50dc681d4584b6852ad028990d1f","ae7f4872199e4d4fa48fe8a1e8911c74","f3a870bfcd7348eda20bdb7e7b2ac47c","efb8d092eba6408f9c56000ebf754630","20fd72e333a04ac786f27c8d2a4d6548","e98138d9f0514006ac802541ff4c50aa","ff94b915f6fa430aadc243dfbb49e2cc","95503d1a2af1412fa70115e8d2a02aad","760241a2baee4fe8a498d0b1c9cab1d1","43c2a423a2994398af9cd5e85b715e10","e3ba93883ff648ad8bcd47a003b68426","54ecf457e20f4cc7a1816987b3cfce9b","6f37a02e34ea49f2bb455000a8df6ce5","a7a999454eec421ebb01edd914a0a330","046139176a404e789e7ec866bbf704a5","3a1092c5322e42429545ac7d2f7ef72b","96ea213a21224fb0a4b845c9fe781343","8f35bf0b99744e7fac7f71b9238308d9","f7415993b17a419dae81859ede51835e","cca7863aa3034949a443cd85d43c9abe","49ac47f7e4ad4a5199c0d623400e3f3d","72045ae4a31841c49b6a852a35bb3dbd","49868b19927749f591f9c350eb5f1799","6980299bf048468290ea4bf2c5e67038","18da490ec19c467cb92b5fba0e449dd2","72f32ed26f8a40e4972d6d94fc7ed4f8","ce8c99e742ce4e6eb6c35fa38da4b1cd","708a79b00bcd4b8cae7df5703967731f","e5fc579bbf234ee78159d909ab8b083a","e1f91c896f4148c2b090b85168b87ac8","684e4ffd563742e8a80dbbd930f2ad1a","b0d0713f05cb47efbc6037458c465105","506a6d1fea344628b4c0a65f8678bfee"]},"executionInfo":{"status":"ok","timestamp":1658194034431,"user_tz":420,"elapsed":7736,"user":{"displayName":"Gerrit Lensink","userId":"03001139976263396963"}},"outputId":"7dd2e0a3-d0ec-4328-da05-bbc7d66816bb"},"outputs":[{"output_type":"display_data","data":{"text/plain":["Downloading:   0%|          | 0.00/208k [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"2fae50dc681d4584b6852ad028990d1f"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["Downloading:   0%|          | 0.00/29.0 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"54ecf457e20f4cc7a1816987b3cfce9b"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["Downloading:   0%|          | 0.00/570 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"49868b19927749f591f9c350eb5f1799"}},"metadata":{}}],"source":["bert_tokenizer = BertTokenizer.from_pretrained('bert-base-cased', do_lower_case = False)"]},{"cell_type":"code","execution_count":11,"metadata":{"id":"6Nh-6diNErGJ","executionInfo":{"status":"ok","timestamp":1658194073185,"user_tz":420,"elapsed":38757,"user":{"displayName":"Gerrit Lensink","userId":"03001139976263396963"}}},"outputs":[],"source":["max_length = 128\n","\n","x_train = bert_tokenizer(list(final_train['comment_text_transf']),\n","                         max_length = max_length,\n","                         truncation = True,\n","                         padding = 'max_length',\n","                         return_tensors = 'tf')\n","y_train = list(final_train['violent'])"]},{"cell_type":"code","execution_count":12,"metadata":{"id":"V3skPllBErDj","executionInfo":{"status":"ok","timestamp":1658194083030,"user_tz":420,"elapsed":9850,"user":{"displayName":"Gerrit Lensink","userId":"03001139976263396963"}}},"outputs":[],"source":["x_test = bert_tokenizer(list(final_test['comment_text_transf'].apply(str)),\n","                         max_length = max_length,\n","                         truncation = True,\n","                         padding = 'max_length',\n","                         return_tensors = 'tf')\n","y_test = list(final_test['violent'])"]},{"cell_type":"code","execution_count":25,"metadata":{"id":"RzjsndOaTAYa","executionInfo":{"status":"ok","timestamp":1658196191073,"user_tz":420,"elapsed":3,"user":{"displayName":"Gerrit Lensink","userId":"03001139976263396963"}}},"outputs":[],"source":["def create_bert_cls_model(hidden_size = 100, dropout = .3, learning_rate = .00005, weight_decay = 0):\n","    bert_model = TFBertModel.from_pretrained('bert-base-cased', num_labels = 2)\n","\n","    # Build the input layers\n","    input_ids = tf.keras.layers.Input(shape=(max_length,), dtype=tf.int64, name='input_ids_layer')\n","    token_type_ids = tf.keras.layers.Input(shape=(max_length,), dtype=tf.int64, name='token_type_ids_layer')\n","    attention_mask = tf.keras.layers.Input(shape=(max_length,), dtype=tf.int64, name='attention_mask_layer')\n","\n","    # Dictionary of inputs\n","    bert_inputs = {'input_ids': input_ids,\n","                   'token_type_ids': token_type_ids,\n","                   'attention_mask': attention_mask} \n","\n","    # bert_inputs = {'input_ids': input_ids} \n","\n","    # model output\n","    bert_out = bert_model(bert_inputs) \n","\n","    # Instead of pooled token, using the 'cls' token \n","    pooled_token = bert_out[1]\n","    # cls_token = bert_out[0][:,0] # First layer, 0th column of each token set\n","\n","\n","    # Hidden layers\n","    hidden = tf.keras.layers.Dense(hidden_size, activation='relu', name='hidden_layer_1')(pooled_token)\n","    hidden = tf.keras.layers.Dropout(dropout)(hidden)  \n","    hidden = tf.keras.layers.Dense(hidden_size, activation='relu', name='hidden_layer_2')(hidden)\n","\n","    classification = tf.keras.layers.Dense(1, activation='sigmoid',name='classification_layer')(hidden) # was cls_token\n","\n","    # instantiate model\n","    classification_model = tf.keras.Model(inputs=[input_ids, token_type_ids, attention_mask], outputs=[classification])\n","    # classification_model = tf.keras.Model(inputs=input_ids, outputs=[classification])\n","    \n","    # compile model\n","    classification_model.compile(optimizer=tfa.optimizers.AdamW(learning_rate = learning_rate,\n","                                                                weight_decay = weight_decay),\n","    # classification_model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=learning_rate),\n","                            loss=tf.keras.losses.BinaryCrossentropy(from_logits=False), \n","                            metrics=['Precision', 'Recall',\n","                                     'TrueNegatives', 'TruePositives', \n","                                     'FalsePositives', 'FalseNegatives',\n","                                     'accuracy', 'AUC', \n","                                     ])\n","   \n","    ### END YOUR CODE\n","    \n","    return classification_model"]},{"cell_type":"code","source":["# bert_out = bert_model(bert_inputs, output_hidden_states = True) "],"metadata":{"id":"p5Qt23ET2riS","executionInfo":{"status":"ok","timestamp":1658194083032,"user_tz":420,"elapsed":13,"user":{"displayName":"Gerrit Lensink","userId":"03001139976263396963"}}},"execution_count":14,"outputs":[]},{"cell_type":"markdown","source":["### Run a few iterations of the model with different configs"],"metadata":{"id":"UBXi2fAJe-yA"}},{"cell_type":"code","execution_count":15,"metadata":{"id":"JP8un6p9TAVi","executionInfo":{"status":"ok","timestamp":1658194083033,"user_tz":420,"elapsed":13,"user":{"displayName":"Gerrit Lensink","userId":"03001139976263396963"}}},"outputs":[],"source":["# bert_cls_model = create_bert_cls_model()\n","\n","# bert_cls_model.summary()\n","\n","# display(keras.utils.plot_model(bert_cls_model, show_shapes=True, dpi=90))\n","\n","# bert_cls_model_history = bert_cls_model.fit([x_train.input_ids, x_train.token_type_ids, x_train.attention_mask], \n","#                                 np.array(y_train),   \n","#                                 validation_data=([x_test.input_ids, x_test.token_type_ids, x_test.attention_mask], \n","#                                                  np.array(y_test)),    \n","#                                 batch_size=8, \n","#                                 epochs=2)\n"]},{"cell_type":"code","execution_count":16,"metadata":{"id":"eL0pWbnNfVT1","executionInfo":{"status":"ok","timestamp":1658194083033,"user_tz":420,"elapsed":12,"user":{"displayName":"Gerrit Lensink","userId":"03001139976263396963"}}},"outputs":[],"source":["# bert_cls_model = create_bert_cls_model()\n","\n","# bert_cls_model.summary()\n","\n","# display(keras.utils.plot_model(bert_cls_model, show_shapes=True, dpi=90))\n","\n","# bert_cls_model_history1 = bert_cls_model.fit([x_train.input_ids, x_train.token_type_ids, x_train.attention_mask], \n","#                                 np.array(y_train),   \n","#                                 validation_data=([x_test.input_ids, x_test.token_type_ids, x_test.attention_mask], \n","#                                                  np.array(y_test)),    \n","#                                 batch_size=8, \n","#                                 epochs=2)\n"]},{"cell_type":"code","source":["# 80/20 w 10k examples - no undersampling\n","# bert_cls_model = create_bert_cls_model()\n","\n","# bert_cls_model.summary()\n","\n","# display(keras.utils.plot_model(bert_cls_model, show_shapes=True, dpi=90))\n","\n","# bert_cls_model_history1 = bert_cls_model.fit([x_train.input_ids, x_train.token_type_ids, x_train.attention_mask], \n","#                                 np.array(y_train),   \n","#                                 validation_data=([x_test.input_ids, x_test.token_type_ids, x_test.attention_mask], \n","#                                                  np.array(y_test)),    \n","#                                 batch_size=32, \n","#                                 epochs=10)"],"metadata":{"id":"AtWkHbiyJHTp","executionInfo":{"status":"ok","timestamp":1658194083034,"user_tz":420,"elapsed":12,"user":{"displayName":"Gerrit Lensink","userId":"03001139976263396963"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["# # 80/20 w 10k examples - undersampling simulated @ 50%\n","\n","# bert_cls_model = create_bert_cls_model()\n","\n","# bert_cls_model.summary()\n","\n","# display(keras.utils.plot_model(bert_cls_model, show_shapes=True, dpi=90))\n","\n","# bert_cls_model_history1 = bert_cls_model.fit([x_train.input_ids, x_train.token_type_ids, x_train.attention_mask], \n","#                                 np.array(y_train),   \n","#                                 validation_data=([x_test.input_ids, x_test.token_type_ids, x_test.attention_mask], \n","#                                                  np.array(y_test)),    \n","#                                 batch_size=8, \n","#                                 epochs=2)"],"metadata":{"id":"djYo5tkVZWnY","executionInfo":{"status":"ok","timestamp":1658194083034,"user_tz":420,"elapsed":12,"user":{"displayName":"Gerrit Lensink","userId":"03001139976263396963"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["# 80/20 w 10k examples - undersampling simulated @ 50%\n","\n","# bert_cls_model = create_bert_cls_model()\n","\n","# bert_cls_model.summary()\n","\n","# display(keras.utils.plot_model(bert_cls_model, show_shapes=True, dpi=90))\n","\n","# bert_cls_model_history2 = bert_cls_model.fit([x_train.input_ids, x_train.token_type_ids, x_train.attention_mask], \n","#                                 np.array(y_train),   \n","#                                 validation_data=([x_test.input_ids, x_test.token_type_ids, x_test.attention_mask], \n","#                                                  np.array(y_test)),    \n","#                                 batch_size=32, \n","#                                 epochs=5)"],"metadata":{"id":"qBd_DcJvg8tl","executionInfo":{"status":"ok","timestamp":1658194083035,"user_tz":420,"elapsed":12,"user":{"displayName":"Gerrit Lensink","userId":"03001139976263396963"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["# bert_cls_model.predict()"],"metadata":{"id":"9kZBbXSJ4TR-","executionInfo":{"status":"ok","timestamp":1658194083035,"user_tz":420,"elapsed":11,"user":{"displayName":"Gerrit Lensink","userId":"03001139976263396963"}}},"execution_count":20,"outputs":[]},{"cell_type":"markdown","source":["### Test chunk"],"metadata":{"id":"Z8PcGKjscfhK"}},{"cell_type":"code","source":["# 80/20 w 10k examples - undersampling simulated @ 70%\n","\n","bert_cls_model = create_bert_cls_model(hidden_size = 150, dropout = .25, learning_rate = .00002)\n","\n","bert_cls_model.summary()\n","\n","display(keras.utils.plot_model(bert_cls_model, show_shapes=True, dpi=90))\n","\n","bert_cls_model_history2 = bert_cls_model.fit([x_train.input_ids, x_train.token_type_ids, x_train.attention_mask], \n","                                np.array(y_train),   \n","                                validation_data=([x_test.input_ids, x_test.token_type_ids, x_test.attention_mask], \n","                                                 np.array(y_test)),    \n","                                batch_size=8, \n","                                epochs=2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"Z9p3WR32M1oZ","executionInfo":{"status":"ok","timestamp":1658198059935,"user_tz":420,"elapsed":1864814,"user":{"displayName":"Gerrit Lensink","userId":"03001139976263396963"}},"outputId":"842548d9-e68a-44b6-aa80-17c6223f39ee"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stderr","text":["Some layers from the model checkpoint at bert-base-cased were not used when initializing TFBertModel: ['nsp___cls', 'mlm___cls']\n","- This IS expected if you are initializing TFBertModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n","- This IS NOT expected if you are initializing TFBertModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n","All the layers of TFBertModel were initialized from the model checkpoint at bert-base-cased.\n","If your task is similar to the task the model of the checkpoint was trained on, you can already use TFBertModel for predictions without further training.\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"model_3\"\n","__________________________________________________________________________________________________\n"," Layer (type)                   Output Shape         Param #     Connected to                     \n","==================================================================================================\n"," attention_mask_layer (InputLay  [(None, 128)]       0           []                               \n"," er)                                                                                              \n","                                                                                                  \n"," input_ids_layer (InputLayer)   [(None, 128)]        0           []                               \n","                                                                                                  \n"," token_type_ids_layer (InputLay  [(None, 128)]       0           []                               \n"," er)                                                                                              \n","                                                                                                  \n"," tf_bert_model_3 (TFBertModel)  TFBaseModelOutputWi  108310272   ['attention_mask_layer[0][0]',   \n","                                thPoolingAndCrossAt               'input_ids_layer[0][0]',        \n","                                tentions(last_hidde               'token_type_ids_layer[0][0]']   \n","                                n_state=(None, 128,                                               \n","                                 768),                                                            \n","                                 pooler_output=(Non                                               \n","                                e, 768),                                                          \n","                                 past_key_values=No                                               \n","                                ne, hidden_states=N                                               \n","                                one, attentions=Non                                               \n","                                e, cross_attentions                                               \n","                                =None)                                                            \n","                                                                                                  \n"," hidden_layer_1 (Dense)         (None, 150)          115350      ['tf_bert_model_3[0][1]']        \n","                                                                                                  \n"," dropout_151 (Dropout)          (None, 150)          0           ['hidden_layer_1[0][0]']         \n","                                                                                                  \n"," hidden_layer_2 (Dense)         (None, 150)          22650       ['dropout_151[0][0]']            \n","                                                                                                  \n"," classification_layer (Dense)   (None, 1)            151         ['hidden_layer_2[0][0]']         \n","                                                                                                  \n","==================================================================================================\n","Total params: 108,448,423\n","Trainable params: 108,448,423\n","Non-trainable params: 0\n","__________________________________________________________________________________________________\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Image object>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Epoch 1/2\n","3500/3500 [==============================] - 937s 265ms/step - loss: 0.1324 - precision: 0.8256 - recall: 0.6891 - true_negatives: 24710.0000 - true_positives: 1979.0000 - false_positives: 418.0000 - false_negatives: 893.0000 - accuracy: 0.9532 - auc: 0.9570 - val_loss: 0.2549 - val_precision: 0.4902 - val_recall: 0.8812 - val_true_negatives: 5693.0000 - val_true_positives: 601.0000 - val_false_positives: 625.0000 - val_false_negatives: 81.0000 - val_accuracy: 0.8991 - val_auc: 0.9567\n","Epoch 2/2\n","3500/3500 [==============================] - 923s 264ms/step - loss: 0.0775 - precision: 0.8775 - recall: 0.8280 - true_negatives: 24796.0000 - true_positives: 2378.0000 - false_positives: 332.0000 - false_negatives: 494.0000 - accuracy: 0.9705 - auc: 0.9852 - val_loss: 0.2883 - val_precision: 0.4623 - val_recall: 0.8988 - val_true_negatives: 5605.0000 - val_true_positives: 613.0000 - val_false_positives: 713.0000 - val_false_negatives: 69.0000 - val_accuracy: 0.8883 - val_auc: 0.9558\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"F5sTnuVj-n1j"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# score = bert_cls_model.evaluate([x_test.input_ids, x_test.token_type_ids, x_test.attention_mask], \n","#                                                  np.array(y_test))"],"metadata":{"id":"4YitK-rgcp_7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# final_test['comment_text_transf']"],"metadata":{"id":"qq0t9z99dONr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# bert_cls_model.predict([x_test.input_ids[:10], x_test.token_type_ids[:10], x_test.attention_mask[:10]])\n","predictions = bert_cls_model.predict([x_test.input_ids, x_test.token_type_ids, x_test.attention_mask])"],"metadata":{"id":"t7rrtVKEdCOg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["predictions = pd.Series(np.rint(predictions).flatten(), dtype = int)\n","test_ids = pd.Series(final_test.index)\n","test_check = final_test\n","test_check = test_check.reset_index(drop = True)\n","test_check = pd.concat([test_check, predictions, test_ids], axis = 1)\n","test_check.rename(columns = {'violent': 'actual', 0: 'prediction', 1: 'id'}, inplace = True)\n","test_check.set_index('id', inplace = True)"],"metadata":{"id":"wWDxr3ww_T5R"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["wrong_predictions = test_check[test_check['actual'] != test_check['prediction']]"],"metadata":{"id":"zGG8DqHlAnWO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["fp = wrong_predictions[wrong_predictions['prediction'] == 1]\n","fn = wrong_predictions[wrong_predictions['prediction'] == 0]\n","len(fp)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8q490haZBDee","executionInfo":{"status":"ok","timestamp":1658085389594,"user_tz":420,"elapsed":1131,"user":{"displayName":"Gerrit Lensink","userId":"14030898330788478401"}},"outputId":"8ad107cd-f280-4a9c-cff2-5e208c588e86"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["383"]},"metadata":{},"execution_count":135}]},{"cell_type":"code","source":["fp.head(10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":604},"id":"SAb6ZSUU8Yqv","executionInfo":{"status":"ok","timestamp":1658086510159,"user_tz":420,"elapsed":892,"user":{"displayName":"Gerrit Lensink","userId":"14030898330788478401"}},"outputId":"79109dd6-0719-4f98-f31b-e3519046324c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plaincomment_text_transf  \\\n","idnthat sucks, glad it wasn't anything major.    \nbig fat diiiing dong ==   \nyour claims are ridiculous (like in the case of ignacy domeyko) it seems that you are a known pov pusher   \nwikipedia sucks and so do you you loser. by the way, i previously editted under that ip (regarding the most recent warning you sent me) before changing my ip so i can vandalize again haha.    \n","38161                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            there aren't more cases, malaga cf is the only, what teams are in the same situation of malaga cf. mérida ud and cp mérida, ad almería and ud almería, you dont have reason, your argument is very stupid, the english wikipedia follows the legal situation of the clubs. sorry, málaga cf and cd málaga in two's separate articles.   \nagain with your conditional crap. you are persona non grata as far as i'm concerned. observerny   \npoop, pee, water, waste   \ni have to say that the ukip's opposition to foreign takeover of companies is less to do with the liberal concern of globalisation than that of conservative xenophobia they have no qualms regarding brit companies being in control of foreign based industry. even animal rights is more to do with opposition to halal and kosher methods of meat production as examples of non british culture than concern over animal welfare. but, hey, don't mind me, i'm just a brit who has to put up with these idiots and their empire ical nonsense    \n","18207   == for those of you who didn't realize i'm retired and here's my retirement speech == i haven't edited in months (which is like lifetimes away from wikipedia) and i don't really want to edit. sometimes i edit once in a long while on anon ip's but just little crap like spelling and grammar. i'm sick of all the fighting, stupidity and unfairness that takes place on wikipedia. i'm tired of people not following the rules and tired of people who instead of having a conversation, jump the gun and be total dumbfucks and start wars. i'm tired of articles like nwoahm (i can't believe it still exists) which is an article about something that doesn't exist but because the guy promoting it has a few sources, due to some retarded shits who mentioned the subject in their professional music articles, it's okay and the article is not outright deleted for being misinformation as it should be. i'm tired of the addiction that wikipedia brought on. i'm tired of the time it sucked up. i'm tired of talking to some of the people on here. i'm just tired of wikipedia. or at least that's how i felt these last few months. i've thought of coming back but decided againt it every time. wikipedia seems to be functioning just about the same with me gone (the same wars still take place, the same people, the same bullshit). so i may come back, but i probably won't. i'm also pleased that it seems line breaks are getting more popular (at least among the metal articles, though i admit i don't look them up much anymore). anyways, it's all inane. i wanted some semblance of my life back after wikipedia drained it away. i got it, and i'm at least somewhat pleased with it at the moment. if you need to speak with me just drop me a line and email me. messaging me here only almost certainly guarantees that i won't see it. if you don't know how to email other users well, you're just plain out of luck. you'll live.    \ni apologize for that snafu at first. )   \n","\n","       actual  prediction  \n","id                         \n","56141       0           1  \n","30892       0           1  \n","31431       0           1  \n","50332       0           1  \n","38161       0           1  \n","39665       0           1  \n","13333       0           1  \n","58711       0           1  \n","18207       0           1  \n","8327        0           1  "],"text/html":["\n","  <div id=\"df-c6167edb-8f4f-4d1c-9599-85791522cc8b\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe tex2jax_ignore\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>comment_text_transf</th>\n","      <th>actual</th>\n","      <th>prediction</th>\n","    </tr>\n","    <tr>\n","      <th>id</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>56141</th>\n","      <td>that sucks, glad it wasn't anything major.</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>30892</th>\n","      <td>== big fat diiiing dong ==</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>31431</th>\n","      <td>your claims are ridiculous (like in the case of ignacy domeyko) it seems that you are a known pov pusher</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>50332</th>\n","      <td>wikipedia sucks and so do you you loser. by the way, i previously editted under that ip (regarding the most recent warning you sent me) before changing my ip so i can vandalize again haha.</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>38161</th>\n","      <td>there aren't more cases, malaga cf is the only, what teams are in the same situation of malaga cf. mérida ud and cp mérida, ad almería and ud almería, you dont have reason, your argument is very stupid, the english wikipedia follows the legal situation of the clubs. sorry, málaga cf and cd málaga in two's separate articles.</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>39665</th>\n","      <td>again with your conditional crap. you are persona non grata as far as i'm concerned. observerny</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>13333</th>\n","      <td>poop, pee, water, waste</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>58711</th>\n","      <td>i have to say that the ukip's opposition to foreign takeover of companies is less to do with the liberal concern of globalisation than that of conservative xenophobia they have no qualms regarding brit companies being in control of foreign based industry. even animal rights is more to do with opposition to halal and kosher methods of meat production as examples of non british culture than concern over animal welfare. but, hey, don't mind me, i'm just a brit who has to put up with these idiots and their empire ical nonsense</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>18207</th>\n","      <td>== for those of you who didn't realize i'm retired and here's my retirement speech == i haven't edited in months (which is like lifetimes away from wikipedia) and i don't really want to edit. sometimes i edit once in a long while on anon ip's but just little crap like spelling and grammar. i'm sick of all the fighting, stupidity and unfairness that takes place on wikipedia. i'm tired of people not following the rules and tired of people who instead of having a conversation, jump the gun and be total dumbfucks and start wars. i'm tired of articles like nwoahm (i can't believe it still exists) which is an article about something that doesn't exist but because the guy promoting it has a few sources, due to some retarded shits who mentioned the subject in their professional music articles, it's okay and the article is not outright deleted for being misinformation as it should be. i'm tired of the addiction that wikipedia brought on. i'm tired of the time it sucked up. i'm tired of talking to some of the people on here. i'm just tired of wikipedia. or at least that's how i felt these last few months. i've thought of coming back but decided againt it every time. wikipedia seems to be functioning just about the same with me gone (the same wars still take place, the same people, the same bullshit). so i may come back, but i probably won't. i'm also pleased that it seems line breaks are getting more popular (at least among the metal articles, though i admit i don't look them up much anymore). anyways, it's all inane. i wanted some semblance of my life back after wikipedia drained it away. i got it, and i'm at least somewhat pleased with it at the moment. if you need to speak with me just drop me a line and email me. messaging me here only almost certainly guarantees that i won't see it. if you don't know how to email other users well, you're just plain out of luck. you'll live.</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>8327</th>\n","      <td>i apologize for that snafu at first. )</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c6167edb-8f4f-4d1c-9599-85791522cc8b')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c6167edb-8f4f-4d1c-9599-85791522cc8b button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c6167edb-8f4f-4d1c-9599-85791522cc8b');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":177}]},{"cell_type":"code","source":["ex_1 = fp['comment_text_transf'][18207]\n","ex_2 = \"' == for those of you who didn't realize i'm retired and here's my retirement speech == i haven't edited in months (which is like lifetimes away from wikipedia) and i don't really want to edit. sometimes i edit once in a long while on anon ip's but just little things like spelling and grammar. i'm sick of all the arguing that takes place on wikipedia. i'm tired of people not following the rules and tired of people who instead of having a conversation, jump the bit and be disrespectful and start wars. i'm tired of articles like nwoahm (i can't believe it still exists) which is an article about something that doesn't exist but because the guy promoting it has a few sources, due to some people who mentioned the subject in their professional music articles, it's okay and the article is not outright deleted for being misinformation as it should be. i'm tired of the addiction that wikipedia brought on. i'm tired of the time it sucked up. i'm tired of talking…'\""],"metadata":{"id":"XGBrYJLo9G7a"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["text_examples = [ex_1, ex_2]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":164},"id":"R9Cgbapnqy-y","executionInfo":{"status":"error","timestamp":1658086726395,"user_tz":420,"elapsed":10,"user":{"displayName":"Gerrit Lensink","userId":"14030898330788478401"}},"outputId":"3eafd362-ab95-4390-f438-4fd4bc2cf38f"},"execution_count":null,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-183-5fe9507493bf>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtext_examples\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mex_1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mex_2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mflatten\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mAttributeError\u001b[0m: 'list' object has no attribute 'flatten'"]}]},{"cell_type":"code","source":["text_examples"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ud0DMn9rq2Q7","executionInfo":{"status":"ok","timestamp":1658086719622,"user_tz":420,"elapsed":587,"user":{"displayName":"Gerrit Lensink","userId":"14030898330788478401"}},"outputId":"76fed20d-1d8f-40f8-a544-ecb730a2c90a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[\" == for those of you who didn't realize i'm retired and here's my retirement speech == i haven't edited in months (which is like lifetimes away from wikipedia) and i don't really want to edit. sometimes i edit once in a long while on anon ip's but just little crap like spelling and grammar. i'm sick of all the fighting, stupidity and unfairness that takes place on wikipedia. i'm tired of people not following the rules and tired of people who instead of having a conversation, jump the gun and be total dumbfucks and start wars. i'm tired of articles like nwoahm (i can't believe it still exists) which is an article about something that doesn't exist but because the guy promoting it has a few sources, due to some retarded shits who mentioned the subject in their professional music articles, it's okay and the article is not outright deleted for being misinformation as it should be. i'm tired of the addiction that wikipedia brought on. i'm tired of the time it sucked up. i'm tired of talking to some of the people on here. i'm just tired of wikipedia. or at least that's how i felt these last few months. i've thought of coming back but decided againt it every time. wikipedia seems to be functioning just about the same with me gone (the same wars still take place, the same people, the same bullshit). so i may come back, but i probably won't. i'm also pleased that it seems line breaks are getting more popular (at least among the metal articles, though i admit i don't look them up much anymore). anyways, it's all inane. i wanted some semblance of my life back after wikipedia drained it away. i got it, and i'm at least somewhat pleased with it at the moment. if you need to speak with me just drop me a line and email me. messaging me here only almost certainly guarantees that i won't see it. if you don't know how to email other users well, you're just plain out of luck. you'll live. \",\n"," \"' == for those of you who didn't realize i'm retired and here's my retirement speech == i haven't edited in months (which is like lifetimes away from wikipedia) and i don't really want to edit. sometimes i edit once in a long while on anon ip's but just little things like spelling and grammar. i'm sick of all the arguing that takes place on wikipedia. i'm tired of people not following the rules and tired of people who instead of having a conversation, jump the bit and be disrespectful and start wars. i'm tired of articles like nwoahm (i can't believe it still exists) which is an article about something that doesn't exist but because the guy promoting it has a few sources, due to some people who mentioned the subject in their professional music articles, it's okay and the article is not outright deleted for being misinformation as it should be. i'm tired of the addiction that wikipedia brought on. i'm tired of the time it sucked up. i'm tired of talking…'\"]"]},"metadata":{},"execution_count":182}]},{"cell_type":"code","source":["# bert_tokenizer(a,\n","#                          max_length = 128,\n","#                          truncation = True,\n","#                          padding = 'max_length',\n","#                          return_tensors = 'tf')"],"metadata":{"id":"ruqgshu39irH"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Improvement Ideas:\n","1. check word/weight pairs using model.predict (see code chunk 44 in GL A2 - submitted)\n","2. Include better transforms\n","3. find commonly confused sentences\n","  \n","  a. check cosine similarity between occurrances that are commonly confused\n","4. Use Bertweet model? https://huggingface.co/docs/transformers/model_doc/bertweet\n","5. Play with BertConfig parameters\n","  \n","  a. num_attention_heads, num_hidden_layers, hidden_dropout_prob, attention_probs_dropout_prob, \n","\n","6. Check if some common words found in violent texts are not tokenized, or commonly end up as [UNK]\n","7. Try other bert architecture/configs (i.e. pooler, cls, BERT averaging, CNN on top)\n","\n"],"metadata":{"id":"iRixD_oPZUed"}},{"cell_type":"markdown","source":["### Tokenization Study\n","After running a few models and noting some trends related to Epochs, batch size, and sampling methods - let's look a bit at some of the tokenization to see if this might be adding to our model's confusion. \n","\n","Using the same tokenizer as above, looking at a few vector representations"],"metadata":{"id":"g9OIGozDrpq1"}},{"cell_type":"markdown","source":["First, we can take a look at the embeddings just based on the pre-trained tokenizer. Once we have those, we can compare across a few different tokenization strategies and see how that might affect our ability to classify. "],"metadata":{"id":"WqZaFTtKT1hm"}},{"cell_type":"markdown","source":["#### Pre-trained model\n","Because our fine-tuned model is currently running with max token length of 128, we need to retain that in this model, even though the test sentences i've included below are much smaller. "],"metadata":{"id":"4upv_vGmT_XB"}},{"cell_type":"markdown","source":["Note: The following process provided numerous roadblocks when done in tensorflow. Referencing [documentation in Pytorch](https://https://www.analyticsvidhya.com/blog/2021/05/measuring-text-similarity-using-bert/) helped remove some roadblocks, so for the purpose of examining similarity in vectors, we will temporarily move to a pytorch implementation. \n","\n","This won't give us any difference in true output, it is just a different syntax in terms of creating vectors. "],"metadata":{"id":"zKVxXEEPzisb"}},{"cell_type":"code","source":["def compute_similarity(raw_sentences, max_length = 128):\n","    \n","    sent = raw_sentences\n","    \n","    #Initialize model and tokenizer:\n","    tokenizer = BertTokenizer.from_pretrained('bert-base-cased')\n","    model = BertModel.from_pretrained('bert-base-cased')\n","\n","    # Tokenize the sentences\n","    # initialize dictionary: stores tokenized sentences\n","    token = {'input_ids': [], 'attention_mask': []}\n","    for sentence in sent:\n","        # encode each sentence, append to dictionary\n","        new_token = tokenizer.encode_plus(sentence, max_length=max_length,\n","                                          truncation=True, padding='max_length',\n","                                          return_tensors='pt')\n","        token['input_ids'].append(new_token['input_ids'][0])\n","        token['attention_mask'].append(new_token['attention_mask'][0])\n","    # reformat list of tensors to single tensor\n","    token['input_ids'] = torch.stack(token['input_ids'])\n","    token['attention_mask'] = torch.stack(token['attention_mask'])\n","\n","    #Process tokens through model:\n","    output = model(**token)\n","    output.keys()\n","\n","    #The dense vector representations of text are contained within the outputs 'last_hidden_state' tensor\n","    embeddings = output.last_hidden_state\n","    # embeddings\n","\n","    att_mask = token['attention_mask']\n","    att_mask.shape\n","\n","    mask = att_mask.unsqueeze(-1).expand(embeddings.size()).float()\n","    mask.shape\n","\n","    mask_embeddings = embeddings * mask\n","    mask_embeddings.shape\n","\n","    #Then we sum the remained of the embeddings along axis 1:\n","    summed = torch.sum(mask_embeddings, 1)\n","    summed.shape\n","\n","    #Then sum the number of values that must be given attention in each position of the tensor:\n","    summed_mask = torch.clamp(mask.sum(1), min=1e-9)\n","    summed_mask.shape\n","\n","    mean_pooled = summed / summed_mask\n","    mean_pooled\n","\n","    # convert from PyTorch tensor to numpy array\n","    mean_pooled = mean_pooled.detach().numpy()\n","    # calculate\n","    return cosine_similarity(\n","        mean_pooled)\n"],"metadata":{"id":"3mvBcC-2zib_"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Now that each of our example sentences are tokenized and mapped to the input ID from BERT, we can start to pull apart the embeddings and masking in order to measure similarity. \n","\n","There are two paths we can follow to understand how embeddings are impacting our classification task: \n","\n","1. Before training, how distant are embedding representations of text that we think should be considered different? \n","\n","2. Based on training results, can we increase the distance in text based on different pre-processing techniques? "],"metadata":{"id":"Y2lqnpGr0REB"}},{"cell_type":"markdown","source":["#### First, let's look at how similar embeddings are for sentences that a human would detect obvious difference in sentiment. \n","\n","We will use the following sentences as our test cases. These are user-generated, not a part of our train or test data. \n","\n","1. this is a fairly benign sentence\n","2. this sentence has some shhhhiiiiittttt in it\n","3. I want to hurt you\n","4. can I give you a hug?\n","5. I'm going to find you and murder you"],"metadata":{"id":"x_sIMtCc30l4"}},{"cell_type":"code","source":["test_text_1 = ['this is a fairly benign sentence', \n","        'this sentence has some shhhhiiiiittttt in it', \n","        'i want to hurt you',\n","        'can i give you a hug?',\n","        \"i'm going to find you and murder you\"]"],"metadata":{"id":"DHClKbQAzcT2"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["We can run these sentences through our `compute_similarity` function to see how far they sit apart in the vector space, based on pre-trained bert word embeddings. \n","\n","we should expect the following, based on our human understanding of violence and toxicity. \n","1. Sentence 1 and 4 should be similar, as they are both fairly common sentences that don't emote violent or toxic intent. \n","2. 3 and 5 should be most similar, as they are direct violent threats\n","3. 2, 3, and 5 should have some similarity, as they all contain some level of toxicity at a minimum\n","\n","A few observations that will make our classification task difficult based on these embedding examples:\n","- Sentence 1 seems to be fairly similar with 2 and 5, which is fairly toxic. This doesn't seem intuitive\n","- Sentence 3 is highly similar to 5 (both violent), but it also looks quite similar to sentence 4, which is highly non-violent. \n","- From a violence perspective, sentence 4 and 5 should be exact opposites. Therefore, we'd expect them to have a negative cosine similarity score. Not only is their score positive, but it is quite high in similarity\n","\n","\n","Based on these few examples, we can say there is maybe some success in determining violence vs. non-violence in terms of *relative* similarity, but for the most part, it is apparent that 'similarity' is not probably based much on violence in BERT's pre-training. This makes our classification task more difficult, and motivates some intentional changes to transformation. "],"metadata":{"id":"3hQQw7gu4xBr"}},{"cell_type":"markdown","source":["#### Second, let's see if we can help our model out a bit by choosing tokenization strategies that push our embeddings in the relative direction we'd like. \n","\n","Throughout early iterations of modeling, we were applying a few transforms that we believed would improve the power of our model. However, after further EDA, we notice we remove some possible correlation between text and violent/non-violent intent. Two examples of this confusion: \n","1. Transform all comments to lower-case\n","\n","2. Replace certain punctuation like \"!\" with \".\". \n","\n","These early models achieved fairly low precision. After digging into the data for additional patterns, it was discovered that on average 14% of violent comments contained fully capitalized tokens, whereas only 5% of non-violent comments were capitalized. \n","\n","Additionally, Violent comments contained 10 times as many exclamations points, on average, compared to non-violent comments. \n","\n","Surpressing these differences in language reduced the power of our model. We can also see that they should affect the embeddings as well. "],"metadata":{"id":"GBjRaoJ17--Y"}},{"cell_type":"code","source":["test_text_2 = [\"to kill a mockingbird is a pretty sad book that even deals with murder. \", \n","               \"I am going to FIND YOU and KILL YOU!\", \n","               \"I am going to find you and kill you.\"]"],"metadata":{"id":"jwquF6tj79W8"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["We can compare a relatively normal sentence about the book 'To kill a mockingbird' to the same sentence, with two different tokenizations. \n","\n","As we expected, the example that retains it's capitalization and punctuation is less alike the baseline sentence compared to the 3rd sentence, which is expected from a violent speech standpoint. \n","\n","This is a key example that highlights the importance of different transformation strategies. "],"metadata":{"id":"IkIEwGi0_Buv"}},{"cell_type":"code","source":["compute_similarity(test_text_2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U_Ps7hkk47Wo","executionInfo":{"status":"ok","timestamp":1658091938757,"user_tz":420,"elapsed":8993,"user":{"displayName":"Gerrit Lensink","userId":"14030898330788478401"}},"outputId":"fe301fc4-2cde-4982-8272-de6287c16beb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["Some weights of the model checkpoint at bert-base-cased were not used when initializing BertModel: ['cls.predictions.transform.LayerNorm.bias', 'cls.seq_relationship.weight', 'cls.predictions.transform.dense.weight', 'cls.seq_relationship.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.transform.dense.bias', 'cls.predictions.decoder.weight', 'cls.predictions.bias']\n","- This IS expected if you are initializing BertModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n","- This IS NOT expected if you are initializing BertModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n"]},{"output_type":"execute_result","data":{"text/plain":["array([[0.9999999, 0.7670758, 0.8069062],\n","       [0.7670758, 1.0000001, 0.8496529],\n","       [0.8069062, 0.8496529, 1.       ]], dtype=float32)"]},"metadata":{},"execution_count":259}]},{"cell_type":"markdown","source":["We can see in extreme cases, though, that this lack of transforms can have negative effects. For example, the sentence about being excited about a birthday is very similar to being excited for someone to die, based on the upper-case and use of exclamation points. "],"metadata":{"id":"U9LnLGDD_2zb"}},{"cell_type":"code","source":["test_text_3 = [\"I AM SO EXCITED FOR THE BIRTHDAY PARTY!!!\", \n","               \"YOU ARE AN AWFUL HUMAN! I AM EXCITED FOR YOU TO DIE!\", \n","               \"I am going to murder you.\"]\n","compute_similarity(test_text_3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rZV329Um_d61","executionInfo":{"status":"ok","timestamp":1658092201009,"user_tz":420,"elapsed":9392,"user":{"displayName":"Gerrit Lensink","userId":"14030898330788478401"}},"outputId":"f6fc7408-78c1-4b5c-cc94-8912d7ac8045"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["Some weights of the model checkpoint at bert-base-cased were not used when initializing BertModel: ['cls.predictions.transform.LayerNorm.bias', 'cls.seq_relationship.weight', 'cls.predictions.transform.dense.weight', 'cls.seq_relationship.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.transform.dense.bias', 'cls.predictions.decoder.weight', 'cls.predictions.bias']\n","- This IS expected if you are initializing BertModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n","- This IS NOT expected if you are initializing BertModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n"]},{"output_type":"execute_result","data":{"text/plain":["array([[0.99999976, 0.9585645 , 0.6576083 ],\n","       [0.9585645 , 1.        , 0.6557969 ],\n","       [0.6576083 , 0.6557969 , 1.0000001 ]], dtype=float32)"]},"metadata":{},"execution_count":260}]},{"cell_type":"markdown","source":["Because we know there is such a disparate difference in use of capitals and exclamation points as noted above, we still choose to not surpress these language differences. We expect in the majority of cases the difference will lead toward better classification, not worse. "],"metadata":{"id":"3NC24OIlAOj-"}},{"cell_type":"markdown","source":["In addition to the ID representation, we can see how this pre-trained tokenizer has tokenized our input: "],"metadata":{"id":"U3wRthacVXmZ"}},{"cell_type":"code","source":["for text in text_examples:\n","  print('Original text:', text)\n","  print('Tokenized:    ', bert_tokenizer.tokenize(text))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"52ckDoI0Vezm","executionInfo":{"status":"ok","timestamp":1657997459536,"user_tz":420,"elapsed":132,"user":{"displayName":"Gerrit Lensink","userId":"14030898330788478401"}},"outputId":"38649dd7-1c22-402d-dbfa-375b7c6d3191"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Original text: this is a fairly benign sentence\n","Tokenized:     ['this', 'is', 'a', 'fairly', 'ben', '##ign', 'sentence']\n","Original text: this sentence has some shhhhiiiiittttt in it\n","Tokenized:     ['this', 'sentence', 'has', 'some', 's', '##hh', '##hh', '##ii', '##ii', '##itt', '##tt', '##t', 'in', 'it']\n","Original text: this fucking sentence is awful and sucks ass\n","Tokenized:     ['this', 'fucking', 'sentence', 'is', 'awful', 'and', 'sucks', 'ass']\n","Original text: i want to hurt you\n","Tokenized:     ['i', 'want', 'to', 'hurt', 'you']\n","Original text: i'm going to find you and murder you\n","Tokenized:     ['i', \"'\", 'm', 'going', 'to', 'find', 'you', 'and', 'murder', 'you']\n","Original text: please do not hurt me\n","Tokenized:     ['please', 'do', 'not', 'hurt', 'me']\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"87wAOYkXEpJ7"},"execution_count":null,"outputs":[]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["UBXi2fAJe-yA"],"name":"modeling_GL_parallel","provenance":[]},"gpuClass":"standard","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"2fae50dc681d4584b6852ad028990d1f":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_ae7f4872199e4d4fa48fe8a1e8911c74","IPY_MODEL_f3a870bfcd7348eda20bdb7e7b2ac47c","IPY_MODEL_efb8d092eba6408f9c56000ebf754630"],"layout":"IPY_MODEL_20fd72e333a04ac786f27c8d2a4d6548"}},"ae7f4872199e4d4fa48fe8a1e8911c74":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_e98138d9f0514006ac802541ff4c50aa","placeholder":"​","style":"IPY_MODEL_ff94b915f6fa430aadc243dfbb49e2cc","value":"Downloading: 100%"}},"f3a870bfcd7348eda20bdb7e7b2ac47c":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_95503d1a2af1412fa70115e8d2a02aad","max":213450,"min":0,"orientation":"horizontal","style":"IPY_MODEL_760241a2baee4fe8a498d0b1c9cab1d1","value":213450}},"efb8d092eba6408f9c56000ebf754630":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_43c2a423a2994398af9cd5e85b715e10","placeholder":"​","style":"IPY_MODEL_e3ba93883ff648ad8bcd47a003b68426","value":" 208k/208k [00:00&lt;00:00, 284kB/s]"}},"20fd72e333a04ac786f27c8d2a4d6548":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e98138d9f0514006ac802541ff4c50aa":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ff94b915f6fa430aadc243dfbb49e2cc":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"95503d1a2af1412fa70115e8d2a02aad":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"760241a2baee4fe8a498d0b1c9cab1d1":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"43c2a423a2994398af9cd5e85b715e10":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e3ba93883ff648ad8bcd47a003b68426":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"54ecf457e20f4cc7a1816987b3cfce9b":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_6f37a02e34ea49f2bb455000a8df6ce5","IPY_MODEL_a7a999454eec421ebb01edd914a0a330","IPY_MODEL_046139176a404e789e7ec866bbf704a5"],"layout":"IPY_MODEL_3a1092c5322e42429545ac7d2f7ef72b"}},"6f37a02e34ea49f2bb455000a8df6ce5":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_96ea213a21224fb0a4b845c9fe781343","placeholder":"​","style":"IPY_MODEL_8f35bf0b99744e7fac7f71b9238308d9","value":"Downloading: 100%"}},"a7a999454eec421ebb01edd914a0a330":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_f7415993b17a419dae81859ede51835e","max":29,"min":0,"orientation":"horizontal","style":"IPY_MODEL_cca7863aa3034949a443cd85d43c9abe","value":29}},"046139176a404e789e7ec866bbf704a5":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_49ac47f7e4ad4a5199c0d623400e3f3d","placeholder":"​","style":"IPY_MODEL_72045ae4a31841c49b6a852a35bb3dbd","value":" 29.0/29.0 [00:00&lt;00:00, 877B/s]"}},"3a1092c5322e42429545ac7d2f7ef72b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"96ea213a21224fb0a4b845c9fe781343":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8f35bf0b99744e7fac7f71b9238308d9":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"f7415993b17a419dae81859ede51835e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"cca7863aa3034949a443cd85d43c9abe":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"49ac47f7e4ad4a5199c0d623400e3f3d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"72045ae4a31841c49b6a852a35bb3dbd":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"49868b19927749f591f9c350eb5f1799":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_6980299bf048468290ea4bf2c5e67038","IPY_MODEL_18da490ec19c467cb92b5fba0e449dd2","IPY_MODEL_72f32ed26f8a40e4972d6d94fc7ed4f8"],"layout":"IPY_MODEL_ce8c99e742ce4e6eb6c35fa38da4b1cd"}},"6980299bf048468290ea4bf2c5e67038":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_708a79b00bcd4b8cae7df5703967731f","placeholder":"​","style":"IPY_MODEL_e5fc579bbf234ee78159d909ab8b083a","value":"Downloading: 100%"}},"18da490ec19c467cb92b5fba0e449dd2":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_e1f91c896f4148c2b090b85168b87ac8","max":570,"min":0,"orientation":"horizontal","style":"IPY_MODEL_684e4ffd563742e8a80dbbd930f2ad1a","value":570}},"72f32ed26f8a40e4972d6d94fc7ed4f8":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_b0d0713f05cb47efbc6037458c465105","placeholder":"​","style":"IPY_MODEL_506a6d1fea344628b4c0a65f8678bfee","value":" 570/570 [00:00&lt;00:00, 16.2kB/s]"}},"ce8c99e742ce4e6eb6c35fa38da4b1cd":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"708a79b00bcd4b8cae7df5703967731f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e5fc579bbf234ee78159d909ab8b083a":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"e1f91c896f4148c2b090b85168b87ac8":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"684e4ffd563742e8a80dbbd930f2ad1a":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"b0d0713f05cb47efbc6037458c465105":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"506a6d1fea344628b4c0a65f8678bfee":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"nbformat":4,"nbformat_minor":0}